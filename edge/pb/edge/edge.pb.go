// Code generated by protoc-gen-go. DO NOT EDIT.
// source: edge.proto

/*
Package edge is a generated protocol buffer package.

It is generated from these files:
	edge.proto

It has these top-level messages:
	InfoRequest
	InfoReply
	NodesRequest
	NodesReply
	MakeTransformerRequest
	MakeTransformerReply
	ReadRequest
	ReadReply
*/
package edge

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InfoRequest struct {
	Node string `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
}

func (m *InfoRequest) Reset()                    { *m = InfoRequest{} }
func (m *InfoRequest) String() string            { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()               {}
func (*InfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *InfoRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type InfoReply struct {
	Key       string            `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Id        string            `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Origin    map[string]string `protobuf:"bytes,3,rep,name=origin" json:"origin,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Ingresses []string          `protobuf:"bytes,4,rep,name=ingresses" json:"ingresses,omitempty"`
	Version   string            `protobuf:"bytes,5,opt,name=version" json:"version,omitempty"`
}

func (m *InfoReply) Reset()                    { *m = InfoReply{} }
func (m *InfoReply) String() string            { return proto.CompactTextString(m) }
func (*InfoReply) ProtoMessage()               {}
func (*InfoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InfoReply) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *InfoReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InfoReply) GetOrigin() map[string]string {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *InfoReply) GetIngresses() []string {
	if m != nil {
		return m.Ingresses
	}
	return nil
}

func (m *InfoReply) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type NodesRequest struct {
}

func (m *NodesRequest) Reset()                    { *m = NodesRequest{} }
func (m *NodesRequest) String() string            { return proto.CompactTextString(m) }
func (*NodesRequest) ProtoMessage()               {}
func (*NodesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type NodesReply struct {
	Nodes []string `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *NodesReply) Reset()                    { *m = NodesReply{} }
func (m *NodesReply) String() string            { return proto.CompactTextString(m) }
func (*NodesReply) ProtoMessage()               {}
func (*NodesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NodesReply) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type MakeTransformerRequest struct {
	Node string `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	// if set, then javascript transformer is created
	Javascript []byte `protobuf:"bytes,2,opt,name=javascript,proto3" json:"javascript,omitempty"`
}

func (m *MakeTransformerRequest) Reset()                    { *m = MakeTransformerRequest{} }
func (m *MakeTransformerRequest) String() string            { return proto.CompactTextString(m) }
func (*MakeTransformerRequest) ProtoMessage()               {}
func (*MakeTransformerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MakeTransformerRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *MakeTransformerRequest) GetJavascript() []byte {
	if m != nil {
		return m.Javascript
	}
	return nil
}

type MakeTransformerReply struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *MakeTransformerReply) Reset()                    { *m = MakeTransformerReply{} }
func (m *MakeTransformerReply) String() string            { return proto.CompactTextString(m) }
func (*MakeTransformerReply) ProtoMessage()               {}
func (*MakeTransformerReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MakeTransformerReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReadRequest struct {
	Start         []byte  `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End           []byte  `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	TransformerId string  `protobuf:"bytes,3,opt,name=transformer_id,json=transformerId" json:"transformer_id,omitempty"`
	Accumulator   string  `protobuf:"bytes,4,opt,name=accumulator" json:"accumulator,omitempty"`
	InputLimit    uint32  `protobuf:"varint,5,opt,name=input_limit,json=inputLimit" json:"input_limit,omitempty"`
	OutputLimit   uint32  `protobuf:"varint,6,opt,name=output_limit,json=outputLimit" json:"output_limit,omitempty"`
	DurationLimit float64 `protobuf:"fixed64,7,opt,name=duration_limit,json=durationLimit" json:"duration_limit,omitempty"`
	Tail          bool    `protobuf:"varint,8,opt,name=tail" json:"tail,omitempty"`
	Node          string  `protobuf:"bytes,9,opt,name=node" json:"node,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ReadRequest) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *ReadRequest) GetEnd() []byte {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *ReadRequest) GetTransformerId() string {
	if m != nil {
		return m.TransformerId
	}
	return ""
}

func (m *ReadRequest) GetAccumulator() string {
	if m != nil {
		return m.Accumulator
	}
	return ""
}

func (m *ReadRequest) GetInputLimit() uint32 {
	if m != nil {
		return m.InputLimit
	}
	return 0
}

func (m *ReadRequest) GetOutputLimit() uint32 {
	if m != nil {
		return m.OutputLimit
	}
	return 0
}

func (m *ReadRequest) GetDurationLimit() float64 {
	if m != nil {
		return m.DurationLimit
	}
	return 0
}

func (m *ReadRequest) GetTail() bool {
	if m != nil {
		return m.Tail
	}
	return false
}

func (m *ReadRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type ReadReply struct {
	Rows            []string `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
	LastAccumulator string   `protobuf:"bytes,2,opt,name=last_accumulator,json=lastAccumulator" json:"last_accumulator,omitempty"`
	LastInputKey    []byte   `protobuf:"bytes,3,opt,name=last_input_key,json=lastInputKey,proto3" json:"last_input_key,omitempty"`
}

func (m *ReadReply) Reset()                    { *m = ReadReply{} }
func (m *ReadReply) String() string            { return proto.CompactTextString(m) }
func (*ReadReply) ProtoMessage()               {}
func (*ReadReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ReadReply) GetRows() []string {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *ReadReply) GetLastAccumulator() string {
	if m != nil {
		return m.LastAccumulator
	}
	return ""
}

func (m *ReadReply) GetLastInputKey() []byte {
	if m != nil {
		return m.LastInputKey
	}
	return nil
}

func init() {
	proto.RegisterType((*InfoRequest)(nil), "edge.InfoRequest")
	proto.RegisterType((*InfoReply)(nil), "edge.InfoReply")
	proto.RegisterType((*NodesRequest)(nil), "edge.NodesRequest")
	proto.RegisterType((*NodesReply)(nil), "edge.NodesReply")
	proto.RegisterType((*MakeTransformerRequest)(nil), "edge.MakeTransformerRequest")
	proto.RegisterType((*MakeTransformerReply)(nil), "edge.MakeTransformerReply")
	proto.RegisterType((*ReadRequest)(nil), "edge.ReadRequest")
	proto.RegisterType((*ReadReply)(nil), "edge.ReadReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Edge service

type EdgeClient interface {
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoReply, error)
	MakeTransformer(ctx context.Context, in *MakeTransformerRequest, opts ...grpc.CallOption) (*MakeTransformerReply, error)
	Nodes(ctx context.Context, in *NodesRequest, opts ...grpc.CallOption) (*NodesReply, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Edge_ReadClient, error)
}

type edgeClient struct {
	cc *grpc.ClientConn
}

func NewEdgeClient(cc *grpc.ClientConn) EdgeClient {
	return &edgeClient{cc}
}

func (c *edgeClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoReply, error) {
	out := new(InfoReply)
	err := grpc.Invoke(ctx, "/edge.Edge/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeClient) MakeTransformer(ctx context.Context, in *MakeTransformerRequest, opts ...grpc.CallOption) (*MakeTransformerReply, error) {
	out := new(MakeTransformerReply)
	err := grpc.Invoke(ctx, "/edge.Edge/MakeTransformer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeClient) Nodes(ctx context.Context, in *NodesRequest, opts ...grpc.CallOption) (*NodesReply, error) {
	out := new(NodesReply)
	err := grpc.Invoke(ctx, "/edge.Edge/Nodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Edge_ReadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Edge_serviceDesc.Streams[0], c.cc, "/edge.Edge/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &edgeReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Edge_ReadClient interface {
	Recv() (*ReadReply, error)
	grpc.ClientStream
}

type edgeReadClient struct {
	grpc.ClientStream
}

func (x *edgeReadClient) Recv() (*ReadReply, error) {
	m := new(ReadReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Edge service

type EdgeServer interface {
	Info(context.Context, *InfoRequest) (*InfoReply, error)
	MakeTransformer(context.Context, *MakeTransformerRequest) (*MakeTransformerReply, error)
	Nodes(context.Context, *NodesRequest) (*NodesReply, error)
	Read(*ReadRequest, Edge_ReadServer) error
}

func RegisterEdgeServer(s *grpc.Server, srv EdgeServer) {
	s.RegisterService(&_Edge_serviceDesc, srv)
}

func _Edge_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edge.Edge/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edge_MakeTransformer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeTransformerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeServer).MakeTransformer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edge.Edge/MakeTransformer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeServer).MakeTransformer(ctx, req.(*MakeTransformerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edge_Nodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeServer).Nodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edge.Edge/Nodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeServer).Nodes(ctx, req.(*NodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edge_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EdgeServer).Read(m, &edgeReadServer{stream})
}

type Edge_ReadServer interface {
	Send(*ReadReply) error
	grpc.ServerStream
}

type edgeReadServer struct {
	grpc.ServerStream
}

func (x *edgeReadServer) Send(m *ReadReply) error {
	return x.ServerStream.SendMsg(m)
}

var _Edge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edge.Edge",
	HandlerType: (*EdgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Edge_Info_Handler,
		},
		{
			MethodName: "MakeTransformer",
			Handler:    _Edge_MakeTransformer_Handler,
		},
		{
			MethodName: "Nodes",
			Handler:    _Edge_Nodes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _Edge_Read_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "edge.proto",
}

func init() { proto.RegisterFile("edge.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 543 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xdf, 0x6e, 0xd3, 0x3e,
	0x14, 0x9e, 0x9b, 0x74, 0x5b, 0x4e, 0xba, 0xb6, 0xbf, 0xa3, 0xea, 0xa7, 0xa8, 0x4c, 0x90, 0x45,
	0x0c, 0x15, 0x09, 0x15, 0xb4, 0xdd, 0x00, 0x77, 0x5c, 0xec, 0xa2, 0x62, 0x03, 0x29, 0xe2, 0xbe,
	0x32, 0xb5, 0x57, 0x99, 0xa5, 0x71, 0xb1, 0x9d, 0xa2, 0x3e, 0x06, 0x0f, 0xc7, 0x1b, 0xf0, 0x20,
	0xc8, 0x76, 0xd2, 0x86, 0x31, 0xb8, 0x3b, 0xe7, 0xf3, 0x97, 0xf3, 0xe7, 0x3b, 0x9f, 0x02, 0xc0,
	0xd9, 0x92, 0x4f, 0xd7, 0x4a, 0x1a, 0x89, 0xa1, 0x8d, 0xb3, 0x33, 0x88, 0x67, 0xe5, 0xad, 0xcc,
	0xf9, 0xd7, 0x8a, 0x6b, 0x83, 0x08, 0x61, 0x29, 0x19, 0x4f, 0x48, 0x4a, 0x26, 0x51, 0xee, 0xe2,
	0xec, 0x07, 0x81, 0xc8, 0x73, 0xd6, 0xc5, 0x16, 0x87, 0x10, 0xdc, 0xf1, 0x6d, 0x4d, 0xb0, 0x21,
	0xf6, 0xa1, 0x23, 0x58, 0xd2, 0x71, 0x40, 0x47, 0x30, 0xbc, 0x84, 0x43, 0xa9, 0xc4, 0x52, 0x94,
	0x49, 0x90, 0x06, 0x93, 0xf8, 0xe2, 0xd1, 0xd4, 0x75, 0xdd, 0x95, 0x98, 0x7e, 0x74, 0xaf, 0x57,
	0xa5, 0x51, 0xdb, 0xbc, 0xa6, 0xe2, 0x29, 0x44, 0xa2, 0x5c, 0x2a, 0xae, 0x35, 0xd7, 0x49, 0x98,
	0x06, 0x93, 0x28, 0xdf, 0x03, 0x98, 0xc0, 0xd1, 0x86, 0x2b, 0x2d, 0x64, 0x99, 0x74, 0x5d, 0x9f,
	0x26, 0x1d, 0xbf, 0x81, 0xb8, 0x55, 0xee, 0x81, 0xe9, 0x46, 0xd0, 0xdd, 0xd0, 0xa2, 0xe2, 0xf5,
	0x80, 0x3e, 0x79, 0xdb, 0x79, 0x4d, 0xb2, 0x3e, 0xf4, 0x3e, 0x48, 0xc6, 0x75, 0xbd, 0x7b, 0x96,
	0x01, 0xd4, 0xb9, 0xdd, 0x73, 0x04, 0x5d, 0xbb, 0xbd, 0x4e, 0x88, 0x1b, 0xc6, 0x27, 0xd9, 0x35,
	0xfc, 0x7f, 0x43, 0xef, 0xf8, 0x27, 0x45, 0x4b, 0x7d, 0x2b, 0xd5, 0x8a, 0xab, 0x7f, 0x28, 0x87,
	0x8f, 0x01, 0xbe, 0xd0, 0x0d, 0xd5, 0x0b, 0x25, 0xd6, 0xc6, 0x0d, 0xd0, 0xcb, 0x5b, 0x48, 0xf6,
	0x0c, 0x46, 0x7f, 0x54, 0xb3, 0xbd, 0xbd, 0xa2, 0xa4, 0x51, 0x34, 0xfb, 0xde, 0x81, 0x38, 0xe7,
	0x94, 0x35, 0xbd, 0x46, 0xd0, 0xd5, 0x86, 0x2a, 0xe3, 0x28, 0xbd, 0xdc, 0x27, 0x76, 0x77, 0x5e,
	0xb2, 0xba, 0x8d, 0x0d, 0xf1, 0x1c, 0xfa, 0x66, 0x5f, 0x7b, 0x2e, 0x58, 0x12, 0xb8, 0x9a, 0x27,
	0x2d, 0x74, 0xc6, 0x30, 0x85, 0x98, 0x2e, 0x16, 0xd5, 0xaa, 0x2a, 0xa8, 0x91, 0x2a, 0x09, 0x1d,
	0xa7, 0x0d, 0xe1, 0x13, 0x88, 0x45, 0xb9, 0xae, 0xcc, 0xbc, 0x10, 0x2b, 0x61, 0xdc, 0x0d, 0x4e,
	0x72, 0x70, 0xd0, 0xb5, 0x45, 0xf0, 0x0c, 0x7a, 0xb2, 0x32, 0x7b, 0xc6, 0xa1, 0x63, 0xc4, 0x1e,
	0xf3, 0x94, 0x73, 0xe8, 0xb3, 0x4a, 0x51, 0x23, 0x64, 0x59, 0x93, 0x8e, 0x52, 0x32, 0x21, 0xf9,
	0x49, 0x83, 0x7a, 0x1a, 0x42, 0x68, 0xa8, 0x28, 0x92, 0xe3, 0x94, 0x4c, 0x8e, 0x73, 0x17, 0xef,
	0xb4, 0x8d, 0x5a, 0xae, 0x5c, 0x43, 0xe4, 0x25, 0xb1, 0x82, 0x21, 0x84, 0x4a, 0x7e, 0x6b, 0x6e,
	0xe5, 0x62, 0x7c, 0x0e, 0xc3, 0x82, 0x6a, 0x33, 0x6f, 0xaf, 0xe6, 0x3d, 0x30, 0xb0, 0xf8, 0xbb,
	0xd6, 0x7a, 0x4f, 0xa1, 0xef, 0xa8, 0x7e, 0x47, 0x6b, 0xa0, 0xc0, 0x89, 0xd8, 0xb3, 0xe8, 0xcc,
	0x82, 0xef, 0xf9, 0xf6, 0xe2, 0x27, 0x81, 0xf0, 0x8a, 0x2d, 0x39, 0xbe, 0x80, 0xd0, 0x9a, 0x19,
	0xff, 0x6b, 0x1b, 0xdb, 0x5d, 0x66, 0x3c, 0xb8, 0xe7, 0xf5, 0xec, 0x00, 0x6f, 0x60, 0x70, 0xef,
	0xc8, 0x78, 0xea, 0x59, 0x0f, 0x3b, 0x69, 0x3c, 0xfe, 0xcb, 0xab, 0x2f, 0xf7, 0x12, 0xba, 0xce,
	0xa5, 0x88, 0x9e, 0xd6, 0xb6, 0xf0, 0x78, 0xf8, 0x1b, 0xe6, 0x3f, 0x98, 0x42, 0x68, 0x85, 0x6a,
	0xa6, 0x6d, 0xf9, 0xa8, 0x99, 0x76, 0xa7, 0x63, 0x76, 0xf0, 0x8a, 0x7c, 0x3e, 0x74, 0xbf, 0x87,
	0xcb, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x11, 0x4b, 0xef, 0xa6, 0x2c, 0x04, 0x00, 0x00,
}
