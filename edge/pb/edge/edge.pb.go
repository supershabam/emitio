// Code generated by protoc-gen-go. DO NOT EDIT.
// source: edge.proto

/*
Package edge is a generated protocol buffer package.

It is generated from these files:
	edge.proto

It has these top-level messages:
	InfoRequest
	InfoReply
	GetNodesRequest
	GetNodesReply
	MakeTransformerRequest
	MakeTransformerReply
	ReadRowsRequest
	ReadRowsReply
*/
package edge

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InfoRequest struct {
	Node string `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
}

func (m *InfoRequest) Reset()                    { *m = InfoRequest{} }
func (m *InfoRequest) String() string            { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()               {}
func (*InfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *InfoRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type InfoReply struct {
	Key       string            `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Id        string            `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Origin    map[string]string `protobuf:"bytes,3,rep,name=origin" json:"origin,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Ingresses []string          `protobuf:"bytes,4,rep,name=ingresses" json:"ingresses,omitempty"`
}

func (m *InfoReply) Reset()                    { *m = InfoReply{} }
func (m *InfoReply) String() string            { return proto.CompactTextString(m) }
func (*InfoReply) ProtoMessage()               {}
func (*InfoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InfoReply) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *InfoReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InfoReply) GetOrigin() map[string]string {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *InfoReply) GetIngresses() []string {
	if m != nil {
		return m.Ingresses
	}
	return nil
}

type GetNodesRequest struct {
}

func (m *GetNodesRequest) Reset()                    { *m = GetNodesRequest{} }
func (m *GetNodesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNodesRequest) ProtoMessage()               {}
func (*GetNodesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GetNodesReply struct {
	Nodes []string `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *GetNodesReply) Reset()                    { *m = GetNodesReply{} }
func (m *GetNodesReply) String() string            { return proto.CompactTextString(m) }
func (*GetNodesReply) ProtoMessage()               {}
func (*GetNodesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetNodesReply) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type MakeTransformerRequest struct {
	Node string `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	// if set, then javascript transformer is created
	Javascript []byte `protobuf:"bytes,2,opt,name=javascript,proto3" json:"javascript,omitempty"`
}

func (m *MakeTransformerRequest) Reset()                    { *m = MakeTransformerRequest{} }
func (m *MakeTransformerRequest) String() string            { return proto.CompactTextString(m) }
func (*MakeTransformerRequest) ProtoMessage()               {}
func (*MakeTransformerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MakeTransformerRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *MakeTransformerRequest) GetJavascript() []byte {
	if m != nil {
		return m.Javascript
	}
	return nil
}

type MakeTransformerReply struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *MakeTransformerReply) Reset()                    { *m = MakeTransformerReply{} }
func (m *MakeTransformerReply) String() string            { return proto.CompactTextString(m) }
func (*MakeTransformerReply) ProtoMessage()               {}
func (*MakeTransformerReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MakeTransformerReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReadRowsRequest struct {
	Start         []byte `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End           []byte `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	TransformerId string `protobuf:"bytes,3,opt,name=transformer_id,json=transformerId" json:"transformer_id,omitempty"`
	Accumulator   string `protobuf:"bytes,4,opt,name=accumulator" json:"accumulator,omitempty"`
	// max number of rows to be processed by the transformer before sending a ReadRowsReply
	InputLimit uint32 `protobuf:"varint,5,opt,name=input_limit,json=inputLimit" json:"input_limit,omitempty"`
	// max number of rows to be produced by the transformer before sending a ReadRowsReply. Note,
	// a single input may produce many output lines, so the ReadRowsReply may have more than this
	// limit in its reply, but once it crosses the limit the ReadRowsReply will be sent.
	OutputLimit uint32 `protobuf:"varint,6,opt,name=output_limit,json=outputLimit" json:"output_limit,omitempty"`
	// max duration in seconds before a ReadRowsReply is sent
	MaxDuration float64 `protobuf:"fixed64,7,opt,name=max_duration,json=maxDuration" json:"max_duration,omitempty"`
	Node        string  `protobuf:"bytes,8,opt,name=node" json:"node,omitempty"`
}

func (m *ReadRowsRequest) Reset()                    { *m = ReadRowsRequest{} }
func (m *ReadRowsRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRowsRequest) ProtoMessage()               {}
func (*ReadRowsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ReadRowsRequest) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *ReadRowsRequest) GetEnd() []byte {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *ReadRowsRequest) GetTransformerId() string {
	if m != nil {
		return m.TransformerId
	}
	return ""
}

func (m *ReadRowsRequest) GetAccumulator() string {
	if m != nil {
		return m.Accumulator
	}
	return ""
}

func (m *ReadRowsRequest) GetInputLimit() uint32 {
	if m != nil {
		return m.InputLimit
	}
	return 0
}

func (m *ReadRowsRequest) GetOutputLimit() uint32 {
	if m != nil {
		return m.OutputLimit
	}
	return 0
}

func (m *ReadRowsRequest) GetMaxDuration() float64 {
	if m != nil {
		return m.MaxDuration
	}
	return 0
}

func (m *ReadRowsRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type ReadRowsReply struct {
	Rows []string `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
	// optionally, the server might return the row key of the last completely scanned row.
	// This is so that a client may efficiently scan to where the request left off in a subsequent
	// call to ReadRows in the case where many rows were processed, but because of the transform, no
	// output was generated.
	LastInputRowKey []byte `protobuf:"bytes,2,opt,name=last_input_row_key,json=lastInputRowKey,proto3" json:"last_input_row_key,omitempty"`
	// similar to last_input_row, the last_accumulator returns the last accumulator from a transform
	// of intput -> output. This combined with last_row allows a client to call ReadRows again
	// and pick up where the last call left off.
	LastAccumulator string `protobuf:"bytes,3,opt,name=last_accumulator,json=lastAccumulator" json:"last_accumulator,omitempty"`
}

func (m *ReadRowsReply) Reset()                    { *m = ReadRowsReply{} }
func (m *ReadRowsReply) String() string            { return proto.CompactTextString(m) }
func (*ReadRowsReply) ProtoMessage()               {}
func (*ReadRowsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ReadRowsReply) GetRows() []string {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *ReadRowsReply) GetLastInputRowKey() []byte {
	if m != nil {
		return m.LastInputRowKey
	}
	return nil
}

func (m *ReadRowsReply) GetLastAccumulator() string {
	if m != nil {
		return m.LastAccumulator
	}
	return ""
}

func init() {
	proto.RegisterType((*InfoRequest)(nil), "edge.InfoRequest")
	proto.RegisterType((*InfoReply)(nil), "edge.InfoReply")
	proto.RegisterType((*GetNodesRequest)(nil), "edge.GetNodesRequest")
	proto.RegisterType((*GetNodesReply)(nil), "edge.GetNodesReply")
	proto.RegisterType((*MakeTransformerRequest)(nil), "edge.MakeTransformerRequest")
	proto.RegisterType((*MakeTransformerReply)(nil), "edge.MakeTransformerReply")
	proto.RegisterType((*ReadRowsRequest)(nil), "edge.ReadRowsRequest")
	proto.RegisterType((*ReadRowsReply)(nil), "edge.ReadRowsReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Edge service

type EdgeClient interface {
	GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesReply, error)
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoReply, error)
	ReadRows(ctx context.Context, in *ReadRowsRequest, opts ...grpc.CallOption) (Edge_ReadRowsClient, error)
	MakeTransformer(ctx context.Context, in *MakeTransformerRequest, opts ...grpc.CallOption) (*MakeTransformerReply, error)
}

type edgeClient struct {
	cc *grpc.ClientConn
}

func NewEdgeClient(cc *grpc.ClientConn) EdgeClient {
	return &edgeClient{cc}
}

func (c *edgeClient) GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesReply, error) {
	out := new(GetNodesReply)
	err := grpc.Invoke(ctx, "/edge.Edge/GetNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoReply, error) {
	out := new(InfoReply)
	err := grpc.Invoke(ctx, "/edge.Edge/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeClient) ReadRows(ctx context.Context, in *ReadRowsRequest, opts ...grpc.CallOption) (Edge_ReadRowsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Edge_serviceDesc.Streams[0], c.cc, "/edge.Edge/ReadRows", opts...)
	if err != nil {
		return nil, err
	}
	x := &edgeReadRowsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Edge_ReadRowsClient interface {
	Recv() (*ReadRowsReply, error)
	grpc.ClientStream
}

type edgeReadRowsClient struct {
	grpc.ClientStream
}

func (x *edgeReadRowsClient) Recv() (*ReadRowsReply, error) {
	m := new(ReadRowsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *edgeClient) MakeTransformer(ctx context.Context, in *MakeTransformerRequest, opts ...grpc.CallOption) (*MakeTransformerReply, error) {
	out := new(MakeTransformerReply)
	err := grpc.Invoke(ctx, "/edge.Edge/MakeTransformer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Edge service

type EdgeServer interface {
	GetNodes(context.Context, *GetNodesRequest) (*GetNodesReply, error)
	Info(context.Context, *InfoRequest) (*InfoReply, error)
	ReadRows(*ReadRowsRequest, Edge_ReadRowsServer) error
	MakeTransformer(context.Context, *MakeTransformerRequest) (*MakeTransformerReply, error)
}

func RegisterEdgeServer(s *grpc.Server, srv EdgeServer) {
	s.RegisterService(&_Edge_serviceDesc, srv)
}

func _Edge_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edge.Edge/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeServer).GetNodes(ctx, req.(*GetNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edge_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edge.Edge/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edge_ReadRows_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRowsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EdgeServer).ReadRows(m, &edgeReadRowsServer{stream})
}

type Edge_ReadRowsServer interface {
	Send(*ReadRowsReply) error
	grpc.ServerStream
}

type edgeReadRowsServer struct {
	grpc.ServerStream
}

func (x *edgeReadRowsServer) Send(m *ReadRowsReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Edge_MakeTransformer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeTransformerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeServer).MakeTransformer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edge.Edge/MakeTransformer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeServer).MakeTransformer(ctx, req.(*MakeTransformerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Edge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edge.Edge",
	HandlerType: (*EdgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodes",
			Handler:    _Edge_GetNodes_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Edge_Info_Handler,
		},
		{
			MethodName: "MakeTransformer",
			Handler:    _Edge_MakeTransformer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadRows",
			Handler:       _Edge_ReadRows_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "edge.proto",
}

func init() { proto.RegisterFile("edge.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x9d, 0xdb, 0xac, 0xb4, 0x37, 0xed, 0xba, 0x5d, 0x0a, 0x8a, 0xca, 0x04, 0x59, 0xa4, 0xa1,
	0x22, 0x50, 0x85, 0xb6, 0x97, 0xb1, 0x37, 0x24, 0x26, 0x54, 0xb1, 0x81, 0x14, 0xf1, 0x5e, 0x99,
	0xda, 0xab, 0xcc, 0xd2, 0xb8, 0x38, 0xce, 0xba, 0x8a, 0x9f, 0xc6, 0x2f, 0xe3, 0x01, 0x09, 0xd9,
	0x4e, 0x9a, 0x50, 0x06, 0x6f, 0xd7, 0xe7, 0x1e, 0xdf, 0x8f, 0xe3, 0x93, 0x00, 0x70, 0x36, 0xe7,
	0xe3, 0xa5, 0x92, 0x5a, 0xa2, 0x67, 0xe2, 0xe8, 0x08, 0xfc, 0x49, 0x7a, 0x2d, 0x63, 0xfe, 0x2d,
	0xe7, 0x99, 0x46, 0x04, 0x2f, 0x95, 0x8c, 0x07, 0x24, 0x24, 0xa3, 0x4e, 0x6c, 0xe3, 0xe8, 0x07,
	0x81, 0x8e, 0xe3, 0x2c, 0x93, 0x35, 0xee, 0x43, 0xf3, 0x86, 0xaf, 0x0b, 0x82, 0x09, 0x71, 0x0f,
	0x1a, 0x82, 0x05, 0x0d, 0x0b, 0x34, 0x04, 0xc3, 0x53, 0x68, 0x49, 0x25, 0xe6, 0x22, 0x0d, 0x9a,
	0x61, 0x73, 0xe4, 0x9f, 0x3c, 0x19, 0xdb, 0xae, 0x9b, 0x12, 0xe3, 0x4f, 0x36, 0x7b, 0x91, 0x6a,
	0xb5, 0x8e, 0x0b, 0x2a, 0x1e, 0x42, 0x47, 0xa4, 0x73, 0xc5, 0xb3, 0x8c, 0x67, 0x81, 0x17, 0x36,
	0x47, 0x9d, 0xb8, 0x02, 0x86, 0x6f, 0xc0, 0xaf, 0x5d, 0xba, 0x67, 0x86, 0x01, 0xec, 0xde, 0xd2,
	0x24, 0xe7, 0xc5, 0x18, 0xee, 0x70, 0xde, 0x38, 0x23, 0xd1, 0x01, 0xf4, 0xdf, 0x73, 0xfd, 0x51,
	0x32, 0x9e, 0x15, 0x4b, 0x46, 0xc7, 0xd0, 0xab, 0x20, 0xb3, 0xd3, 0x00, 0x76, 0xcd, 0xa6, 0x59,
	0x40, 0x6c, 0x63, 0x77, 0x88, 0x2e, 0xe1, 0xf1, 0x15, 0xbd, 0xe1, 0x9f, 0x15, 0x4d, 0xb3, 0x6b,
	0xa9, 0x16, 0x5c, 0xfd, 0x47, 0x25, 0x7c, 0x0a, 0xf0, 0x95, 0xde, 0xd2, 0x6c, 0xa6, 0xc4, 0x52,
	0xdb, 0x31, 0xba, 0x71, 0x0d, 0x89, 0x9e, 0xc3, 0xe0, 0xaf, 0x6a, 0xa6, 0xb7, 0x53, 0x8f, 0x94,
	0xea, 0x45, 0xbf, 0x08, 0xf4, 0x63, 0x4e, 0x59, 0x2c, 0x57, 0xe5, 0xc0, 0x66, 0xbe, 0x4c, 0x53,
	0xa5, 0x2d, 0xad, 0x1b, 0xbb, 0x83, 0x51, 0x81, 0xa7, 0xac, 0x68, 0x65, 0x42, 0x3c, 0x86, 0x3d,
	0x5d, 0xd5, 0x9f, 0x0a, 0x16, 0x34, 0x6d, 0xdd, 0x5e, 0x0d, 0x9d, 0x30, 0x0c, 0xc1, 0xa7, 0xb3,
	0x59, 0xbe, 0xc8, 0x13, 0xaa, 0xa5, 0x0a, 0x3c, 0xcb, 0xa9, 0x43, 0xf8, 0x0c, 0x7c, 0x91, 0x2e,
	0x73, 0x3d, 0x4d, 0xc4, 0x42, 0xe8, 0x60, 0x37, 0x24, 0xa3, 0x5e, 0x0c, 0x16, 0xba, 0x34, 0x08,
	0x1e, 0x41, 0x57, 0xe6, 0xba, 0x62, 0xb4, 0x2c, 0xc3, 0x77, 0xd8, 0x86, 0xb2, 0xa0, 0x77, 0x53,
	0x96, 0x2b, 0xaa, 0x85, 0x4c, 0x83, 0x07, 0x21, 0x19, 0x91, 0xd8, 0x5f, 0xd0, 0xbb, 0x77, 0x05,
	0xb4, 0xd1, 0xb1, 0x5d, 0x73, 0xdb, 0x77, 0xe8, 0x55, 0xeb, 0x1b, 0x81, 0x10, 0x3c, 0x25, 0x57,
	0xe5, 0xdb, 0xd8, 0x18, 0x5f, 0x02, 0x26, 0x34, 0xd3, 0x53, 0x37, 0xa4, 0x92, 0xab, 0xa9, 0xf1,
	0x83, 0x53, 0xa2, 0x6f, 0x32, 0x13, 0x93, 0x88, 0xe5, 0xea, 0x03, 0x5f, 0xe3, 0x0b, 0xd8, 0xb7,
	0xe4, 0xfa, 0xce, 0x4e, 0x17, 0x4b, 0x7d, 0x5b, 0xc1, 0x27, 0x3f, 0x09, 0x78, 0x17, 0x6c, 0xce,
	0xf1, 0x0c, 0xda, 0xa5, 0x45, 0xf0, 0x91, 0xf3, 0xef, 0x96, 0x8b, 0x86, 0x0f, 0xb7, 0xe1, 0x65,
	0xb2, 0x8e, 0x76, 0xf0, 0x15, 0x78, 0xc6, 0xe9, 0x78, 0x50, 0x77, 0xbd, 0xbb, 0xd1, 0xdf, 0xfa,
	0x10, 0xa2, 0x1d, 0x3c, 0x87, 0x76, 0xb9, 0x6d, 0xd9, 0x67, 0xeb, 0xf1, 0xcb, 0x3e, 0x7f, 0x88,
	0x12, 0xed, 0xbc, 0x26, 0x78, 0x05, 0xfd, 0x2d, 0x47, 0xe1, 0xa1, 0xe3, 0xde, 0x6f, 0xdb, 0xe1,
	0xf0, 0x1f, 0x59, 0x5b, 0xf0, 0x4b, 0xcb, 0xfe, 0x16, 0x4e, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x6d, 0x9a, 0x2a, 0x79, 0x24, 0x04, 0x00, 0x00,
}
