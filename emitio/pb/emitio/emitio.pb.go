// Code generated by protoc-gen-go. DO NOT EDIT.
// source: emitio.proto

/*
Package emitio is a generated protocol buffer package.

It is generated from these files:
	emitio.proto

It has these top-level messages:
	GetIngressesRequest
	GetIngressesReply
	MakeTransformerRequest
	MakeTransformerReply
	ReadRowsRequest
	ReadRowsReply
*/
package emitio

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetIngressesRequest struct {
}

func (m *GetIngressesRequest) Reset()                    { *m = GetIngressesRequest{} }
func (m *GetIngressesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetIngressesRequest) ProtoMessage()               {}
func (*GetIngressesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetIngressesReply struct {
	Ingresses []string `protobuf:"bytes,1,rep,name=ingresses" json:"ingresses,omitempty"`
}

func (m *GetIngressesReply) Reset()                    { *m = GetIngressesReply{} }
func (m *GetIngressesReply) String() string            { return proto.CompactTextString(m) }
func (*GetIngressesReply) ProtoMessage()               {}
func (*GetIngressesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetIngressesReply) GetIngresses() []string {
	if m != nil {
		return m.Ingresses
	}
	return nil
}

type MakeTransformerRequest struct {
	// if set, then javascript transformer is created
	Javascript []byte `protobuf:"bytes,1,opt,name=javascript,proto3" json:"javascript,omitempty"`
}

func (m *MakeTransformerRequest) Reset()                    { *m = MakeTransformerRequest{} }
func (m *MakeTransformerRequest) String() string            { return proto.CompactTextString(m) }
func (*MakeTransformerRequest) ProtoMessage()               {}
func (*MakeTransformerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MakeTransformerRequest) GetJavascript() []byte {
	if m != nil {
		return m.Javascript
	}
	return nil
}

type MakeTransformerReply struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *MakeTransformerReply) Reset()                    { *m = MakeTransformerReply{} }
func (m *MakeTransformerReply) String() string            { return proto.CompactTextString(m) }
func (*MakeTransformerReply) ProtoMessage()               {}
func (*MakeTransformerReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MakeTransformerReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReadRowsRequest struct {
	Start         []byte `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End           []byte `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	TransformerId string `protobuf:"bytes,3,opt,name=transformer_id,json=transformerId" json:"transformer_id,omitempty"`
	Accumulator   string `protobuf:"bytes,4,opt,name=accumulator" json:"accumulator,omitempty"`
	// ReadRows will terminate after reading N rows worth of input. Note: transforms are not
	// 1:1 for input to output rows, so N rows of input may result in M rows of output.
	Limit int64 `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
}

func (m *ReadRowsRequest) Reset()                    { *m = ReadRowsRequest{} }
func (m *ReadRowsRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRowsRequest) ProtoMessage()               {}
func (*ReadRowsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReadRowsRequest) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *ReadRowsRequest) GetEnd() []byte {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *ReadRowsRequest) GetTransformerId() string {
	if m != nil {
		return m.TransformerId
	}
	return ""
}

func (m *ReadRowsRequest) GetAccumulator() string {
	if m != nil {
		return m.Accumulator
	}
	return ""
}

func (m *ReadRowsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ReadRowsReply struct {
	Rows []string `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
	// optionally, the server might return the row key of the last completely scanned row.
	// This is so that a client may efficiently scan to where the request left off in a subsequent
	// call to ReadRows in the case where many rows were processed, but because of the transform, no
	// output was generated.
	LastInputRow []byte `protobuf:"bytes,2,opt,name=last_input_row,json=lastInputRow,proto3" json:"last_input_row,omitempty"`
	// similar to last_input_row, the last_accumulator returns the last accumulator from a transform
	// of intput -> output. This combined with last_row allows a client to call ReadRows again
	// and pick up where the last call left off.
	LastAccumulator string `protobuf:"bytes,3,opt,name=last_accumulator,json=lastAccumulator" json:"last_accumulator,omitempty"`
}

func (m *ReadRowsReply) Reset()                    { *m = ReadRowsReply{} }
func (m *ReadRowsReply) String() string            { return proto.CompactTextString(m) }
func (*ReadRowsReply) ProtoMessage()               {}
func (*ReadRowsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ReadRowsReply) GetRows() []string {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *ReadRowsReply) GetLastInputRow() []byte {
	if m != nil {
		return m.LastInputRow
	}
	return nil
}

func (m *ReadRowsReply) GetLastAccumulator() string {
	if m != nil {
		return m.LastAccumulator
	}
	return ""
}

func init() {
	proto.RegisterType((*GetIngressesRequest)(nil), "emitio.GetIngressesRequest")
	proto.RegisterType((*GetIngressesReply)(nil), "emitio.GetIngressesReply")
	proto.RegisterType((*MakeTransformerRequest)(nil), "emitio.MakeTransformerRequest")
	proto.RegisterType((*MakeTransformerReply)(nil), "emitio.MakeTransformerReply")
	proto.RegisterType((*ReadRowsRequest)(nil), "emitio.ReadRowsRequest")
	proto.RegisterType((*ReadRowsReply)(nil), "emitio.ReadRowsReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Emitio service

type EmitioClient interface {
	ReadRows(ctx context.Context, in *ReadRowsRequest, opts ...grpc.CallOption) (Emitio_ReadRowsClient, error)
	MakeTransformer(ctx context.Context, in *MakeTransformerRequest, opts ...grpc.CallOption) (*MakeTransformerReply, error)
	GetIngresses(ctx context.Context, in *GetIngressesRequest, opts ...grpc.CallOption) (*GetIngressesReply, error)
}

type emitioClient struct {
	cc *grpc.ClientConn
}

func NewEmitioClient(cc *grpc.ClientConn) EmitioClient {
	return &emitioClient{cc}
}

func (c *emitioClient) ReadRows(ctx context.Context, in *ReadRowsRequest, opts ...grpc.CallOption) (Emitio_ReadRowsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Emitio_serviceDesc.Streams[0], c.cc, "/emitio.Emitio/ReadRows", opts...)
	if err != nil {
		return nil, err
	}
	x := &emitioReadRowsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Emitio_ReadRowsClient interface {
	Recv() (*ReadRowsReply, error)
	grpc.ClientStream
}

type emitioReadRowsClient struct {
	grpc.ClientStream
}

func (x *emitioReadRowsClient) Recv() (*ReadRowsReply, error) {
	m := new(ReadRowsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *emitioClient) MakeTransformer(ctx context.Context, in *MakeTransformerRequest, opts ...grpc.CallOption) (*MakeTransformerReply, error) {
	out := new(MakeTransformerReply)
	err := grpc.Invoke(ctx, "/emitio.Emitio/MakeTransformer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitioClient) GetIngresses(ctx context.Context, in *GetIngressesRequest, opts ...grpc.CallOption) (*GetIngressesReply, error) {
	out := new(GetIngressesReply)
	err := grpc.Invoke(ctx, "/emitio.Emitio/GetIngresses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Emitio service

type EmitioServer interface {
	ReadRows(*ReadRowsRequest, Emitio_ReadRowsServer) error
	MakeTransformer(context.Context, *MakeTransformerRequest) (*MakeTransformerReply, error)
	GetIngresses(context.Context, *GetIngressesRequest) (*GetIngressesReply, error)
}

func RegisterEmitioServer(s *grpc.Server, srv EmitioServer) {
	s.RegisterService(&_Emitio_serviceDesc, srv)
}

func _Emitio_ReadRows_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRowsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EmitioServer).ReadRows(m, &emitioReadRowsServer{stream})
}

type Emitio_ReadRowsServer interface {
	Send(*ReadRowsReply) error
	grpc.ServerStream
}

type emitioReadRowsServer struct {
	grpc.ServerStream
}

func (x *emitioReadRowsServer) Send(m *ReadRowsReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Emitio_MakeTransformer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeTransformerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitioServer).MakeTransformer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emitio.Emitio/MakeTransformer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitioServer).MakeTransformer(ctx, req.(*MakeTransformerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emitio_GetIngresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIngressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitioServer).GetIngresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emitio.Emitio/GetIngresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitioServer).GetIngresses(ctx, req.(*GetIngressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Emitio_serviceDesc = grpc.ServiceDesc{
	ServiceName: "emitio.Emitio",
	HandlerType: (*EmitioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeTransformer",
			Handler:    _Emitio_MakeTransformer_Handler,
		},
		{
			MethodName: "GetIngresses",
			Handler:    _Emitio_GetIngresses_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadRows",
			Handler:       _Emitio_ReadRows_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "emitio.proto",
}

func init() { proto.RegisterFile("emitio.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcf, 0x4e, 0xe3, 0x30,
	0x10, 0xc6, 0x37, 0x4d, 0x5b, 0x6d, 0x67, 0xd3, 0x3f, 0x3b, 0xdb, 0xee, 0x66, 0xbb, 0x55, 0x15,
	0x45, 0xbb, 0xab, 0x72, 0xa9, 0xf8, 0x73, 0xe1, 0x84, 0xc4, 0x01, 0x41, 0x0f, 0x1c, 0xb0, 0xb8,
	0x57, 0xa6, 0x31, 0xc8, 0x90, 0xc4, 0xc1, 0x76, 0x88, 0xfa, 0x26, 0xbc, 0x20, 0xef, 0x81, 0xe2,
	0x34, 0x4a, 0x68, 0xcb, 0xcd, 0xf3, 0x9b, 0xcf, 0x9f, 0x3f, 0x79, 0x06, 0x1c, 0x16, 0x71, 0xcd,
	0xc5, 0x3c, 0x91, 0x42, 0x0b, 0x6c, 0x17, 0x95, 0x3f, 0x82, 0x1f, 0x97, 0x4c, 0x2f, 0xe2, 0x07,
	0xc9, 0x94, 0x62, 0x8a, 0xb0, 0xe7, 0x94, 0x29, 0xed, 0x1f, 0xc1, 0xf7, 0x8f, 0x38, 0x09, 0xd7,
	0x38, 0x81, 0x0e, 0x2f, 0x89, 0x6b, 0x79, 0xf6, 0xac, 0x43, 0x2a, 0xe0, 0x9f, 0xc2, 0xcf, 0x6b,
	0xfa, 0xc4, 0x6e, 0x25, 0x8d, 0xd5, 0xbd, 0x90, 0x11, 0x93, 0x1b, 0x33, 0x9c, 0x02, 0x3c, 0xd2,
	0x17, 0xaa, 0x56, 0x92, 0x27, 0xda, 0xb5, 0x3c, 0x6b, 0xe6, 0x90, 0x1a, 0xf1, 0xff, 0xc3, 0x70,
	0xe7, 0x66, 0xfe, 0x5e, 0x0f, 0x1a, 0x3c, 0x30, 0xfa, 0x0e, 0x69, 0xf0, 0xc0, 0x7f, 0xb5, 0xa0,
	0x4f, 0x18, 0x0d, 0x88, 0xc8, 0xca, 0xa0, 0x38, 0x84, 0x96, 0xd2, 0x54, 0x96, 0xb6, 0x45, 0x81,
	0x03, 0xb0, 0x59, 0x1c, 0xb8, 0x0d, 0xc3, 0xf2, 0x23, 0xfe, 0x83, 0x9e, 0xae, 0xfc, 0x97, 0x3c,
	0x70, 0x6d, 0xe3, 0xdb, 0xad, 0xd1, 0x45, 0x80, 0x1e, 0x7c, 0xa3, 0xab, 0x55, 0x1a, 0xa5, 0x21,
	0xd5, 0x42, 0xba, 0x4d, 0xa3, 0xa9, 0xa3, 0xfc, 0xc1, 0x90, 0x47, 0x5c, 0xbb, 0x2d, 0xcf, 0x9a,
	0xd9, 0xa4, 0x28, 0x7c, 0x0d, 0xdd, 0x2a, 0x59, 0x9e, 0x1d, 0xa1, 0x29, 0x45, 0x56, 0x7e, 0x93,
	0x39, 0xe3, 0x5f, 0xe8, 0x85, 0x54, 0xe9, 0x25, 0x8f, 0x93, 0x54, 0x2f, 0xa5, 0xc8, 0x36, 0x01,
	0x9d, 0x9c, 0x2e, 0x72, 0x48, 0x44, 0x86, 0x07, 0x30, 0x30, 0xaa, 0x7a, 0x8e, 0x22, 0x6b, 0x3f,
	0xe7, 0xe7, 0x15, 0x3e, 0x7e, 0xb3, 0xa0, 0x7d, 0x61, 0xe6, 0x88, 0x67, 0xf0, 0xb5, 0x0c, 0x80,
	0xbf, 0xe6, 0x9b, 0x51, 0x6f, 0x7d, 0xd6, 0x78, 0xb4, 0xdb, 0x48, 0xc2, 0xb5, 0xff, 0xe5, 0xd0,
	0xc2, 0x1b, 0xe8, 0x6f, 0xcd, 0x00, 0xa7, 0xa5, 0x7a, 0xff, 0x58, 0xc7, 0x93, 0x4f, 0xfb, 0xc6,
	0x14, 0xaf, 0xc0, 0xa9, 0xef, 0x10, 0xfe, 0x29, 0xf5, 0x7b, 0x16, 0x6e, 0xfc, 0x7b, 0x7f, 0xd3,
	0x38, 0xdd, 0xb5, 0xcd, 0xce, 0x9e, 0xbc, 0x07, 0x00, 0x00, 0xff, 0xff, 0x25, 0x97, 0x46, 0x06,
	0xc3, 0x02, 0x00, 0x00,
}
