// Code generated by protoc-gen-go. DO NOT EDIT.
// source: emitio.proto

/*
Package emitio is a generated protocol buffer package.

It is generated from these files:
	emitio.proto

It has these top-level messages:
	ReadRequest
	ReadReply
	InfoRequest
	InfoReply
	MakeTransformerRequest
	MakeTransformerReply
*/
package emitio

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReadRequest struct {
	Uri           string  `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
	TransformerId string  `protobuf:"bytes,2,opt,name=transformer_id,json=transformerId" json:"transformer_id,omitempty"`
	Accumulator   string  `protobuf:"bytes,3,opt,name=accumulator" json:"accumulator,omitempty"`
	Start         int64   `protobuf:"varint,4,opt,name=start" json:"start,omitempty"`
	End           int64   `protobuf:"varint,5,opt,name=end" json:"end,omitempty"`
	Tail          bool    `protobuf:"varint,6,opt,name=tail" json:"tail,omitempty"`
	InputLimit    uint32  `protobuf:"varint,7,opt,name=input_limit,json=inputLimit" json:"input_limit,omitempty"`
	OutputLimit   uint32  `protobuf:"varint,8,opt,name=output_limit,json=outputLimit" json:"output_limit,omitempty"`
	DurationLimit float64 `protobuf:"fixed64,9,opt,name=duration_limit,json=durationLimit" json:"duration_limit,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReadRequest) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *ReadRequest) GetTransformerId() string {
	if m != nil {
		return m.TransformerId
	}
	return ""
}

func (m *ReadRequest) GetAccumulator() string {
	if m != nil {
		return m.Accumulator
	}
	return ""
}

func (m *ReadRequest) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ReadRequest) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *ReadRequest) GetTail() bool {
	if m != nil {
		return m.Tail
	}
	return false
}

func (m *ReadRequest) GetInputLimit() uint32 {
	if m != nil {
		return m.InputLimit
	}
	return 0
}

func (m *ReadRequest) GetOutputLimit() uint32 {
	if m != nil {
		return m.OutputLimit
	}
	return 0
}

func (m *ReadRequest) GetDurationLimit() float64 {
	if m != nil {
		return m.DurationLimit
	}
	return 0
}

type ReadReply struct {
	Rows            []string `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
	LastAccumulator string   `protobuf:"bytes,2,opt,name=last_accumulator,json=lastAccumulator" json:"last_accumulator,omitempty"`
	LastOffset      int64    `protobuf:"varint,3,opt,name=last_offset,json=lastOffset" json:"last_offset,omitempty"`
}

func (m *ReadReply) Reset()                    { *m = ReadReply{} }
func (m *ReadReply) String() string            { return proto.CompactTextString(m) }
func (*ReadReply) ProtoMessage()               {}
func (*ReadReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReadReply) GetRows() []string {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *ReadReply) GetLastAccumulator() string {
	if m != nil {
		return m.LastAccumulator
	}
	return ""
}

func (m *ReadReply) GetLastOffset() int64 {
	if m != nil {
		return m.LastOffset
	}
	return 0
}

type InfoRequest struct {
}

func (m *InfoRequest) Reset()                    { *m = InfoRequest{} }
func (m *InfoRequest) String() string            { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()               {}
func (*InfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type InfoReply struct {
	Key       string            `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Id        string            `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Origin    map[string]string `protobuf:"bytes,3,rep,name=origin" json:"origin,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Ingresses []string          `protobuf:"bytes,4,rep,name=ingresses" json:"ingresses,omitempty"`
	Version   string            `protobuf:"bytes,5,opt,name=version" json:"version,omitempty"`
}

func (m *InfoReply) Reset()                    { *m = InfoReply{} }
func (m *InfoReply) String() string            { return proto.CompactTextString(m) }
func (*InfoReply) ProtoMessage()               {}
func (*InfoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *InfoReply) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *InfoReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InfoReply) GetOrigin() map[string]string {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *InfoReply) GetIngresses() []string {
	if m != nil {
		return m.Ingresses
	}
	return nil
}

func (m *InfoReply) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type MakeTransformerRequest struct {
	Javascript []byte `protobuf:"bytes,1,opt,name=javascript,proto3" json:"javascript,omitempty"`
}

func (m *MakeTransformerRequest) Reset()                    { *m = MakeTransformerRequest{} }
func (m *MakeTransformerRequest) String() string            { return proto.CompactTextString(m) }
func (*MakeTransformerRequest) ProtoMessage()               {}
func (*MakeTransformerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MakeTransformerRequest) GetJavascript() []byte {
	if m != nil {
		return m.Javascript
	}
	return nil
}

type MakeTransformerReply struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *MakeTransformerReply) Reset()                    { *m = MakeTransformerReply{} }
func (m *MakeTransformerReply) String() string            { return proto.CompactTextString(m) }
func (*MakeTransformerReply) ProtoMessage()               {}
func (*MakeTransformerReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MakeTransformerReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*ReadRequest)(nil), "emitio.ReadRequest")
	proto.RegisterType((*ReadReply)(nil), "emitio.ReadReply")
	proto.RegisterType((*InfoRequest)(nil), "emitio.InfoRequest")
	proto.RegisterType((*InfoReply)(nil), "emitio.InfoReply")
	proto.RegisterType((*MakeTransformerRequest)(nil), "emitio.MakeTransformerRequest")
	proto.RegisterType((*MakeTransformerReply)(nil), "emitio.MakeTransformerReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Emitio service

type EmitioClient interface {
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoReply, error)
	MakeTransformer(ctx context.Context, in *MakeTransformerRequest, opts ...grpc.CallOption) (*MakeTransformerReply, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Emitio_ReadClient, error)
}

type emitioClient struct {
	cc *grpc.ClientConn
}

func NewEmitioClient(cc *grpc.ClientConn) EmitioClient {
	return &emitioClient{cc}
}

func (c *emitioClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoReply, error) {
	out := new(InfoReply)
	err := grpc.Invoke(ctx, "/emitio.Emitio/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitioClient) MakeTransformer(ctx context.Context, in *MakeTransformerRequest, opts ...grpc.CallOption) (*MakeTransformerReply, error) {
	out := new(MakeTransformerReply)
	err := grpc.Invoke(ctx, "/emitio.Emitio/MakeTransformer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitioClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Emitio_ReadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Emitio_serviceDesc.Streams[0], c.cc, "/emitio.Emitio/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &emitioReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Emitio_ReadClient interface {
	Recv() (*ReadReply, error)
	grpc.ClientStream
}

type emitioReadClient struct {
	grpc.ClientStream
}

func (x *emitioReadClient) Recv() (*ReadReply, error) {
	m := new(ReadReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Emitio service

type EmitioServer interface {
	Info(context.Context, *InfoRequest) (*InfoReply, error)
	MakeTransformer(context.Context, *MakeTransformerRequest) (*MakeTransformerReply, error)
	Read(*ReadRequest, Emitio_ReadServer) error
}

func RegisterEmitioServer(s *grpc.Server, srv EmitioServer) {
	s.RegisterService(&_Emitio_serviceDesc, srv)
}

func _Emitio_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitioServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emitio.Emitio/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitioServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emitio_MakeTransformer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeTransformerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitioServer).MakeTransformer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emitio.Emitio/MakeTransformer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitioServer).MakeTransformer(ctx, req.(*MakeTransformerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emitio_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EmitioServer).Read(m, &emitioReadServer{stream})
}

type Emitio_ReadServer interface {
	Send(*ReadReply) error
	grpc.ServerStream
}

type emitioReadServer struct {
	grpc.ServerStream
}

func (x *emitioReadServer) Send(m *ReadReply) error {
	return x.ServerStream.SendMsg(m)
}

var _Emitio_serviceDesc = grpc.ServiceDesc{
	ServiceName: "emitio.Emitio",
	HandlerType: (*EmitioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Emitio_Info_Handler,
		},
		{
			MethodName: "MakeTransformer",
			Handler:    _Emitio_MakeTransformer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _Emitio_Read_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "emitio.proto",
}

func init() { proto.RegisterFile("emitio.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x51, 0x6f, 0xd3, 0x30,
	0x10, 0x9e, 0x9b, 0xb6, 0x5b, 0x2e, 0x6d, 0x57, 0x4c, 0x85, 0xac, 0x6a, 0x6c, 0x21, 0xd2, 0x50,
	0x78, 0xa9, 0xa6, 0x22, 0xa4, 0xc1, 0x1b, 0x0f, 0x7b, 0x98, 0x04, 0x9a, 0xb0, 0x78, 0xaf, 0x4c,
	0xe3, 0x4e, 0xa6, 0x69, 0x5c, 0x6c, 0xa7, 0xa8, 0xbf, 0x82, 0xdf, 0xc4, 0xaf, 0xe0, 0xef, 0x20,
	0xdb, 0x49, 0x13, 0xd8, 0xf6, 0x76, 0xf7, 0xf9, 0xcb, 0xdd, 0x77, 0xdf, 0x5d, 0x60, 0xc0, 0x37,
	0xc2, 0x08, 0x39, 0xdb, 0x2a, 0x69, 0x24, 0xee, 0xfb, 0x2c, 0xf9, 0xd5, 0x81, 0x88, 0x72, 0x96,
	0x51, 0xfe, 0xa3, 0xe4, 0xda, 0xe0, 0x31, 0x04, 0xa5, 0x12, 0x04, 0xc5, 0x28, 0x0d, 0xa9, 0x0d,
	0xf1, 0x25, 0x8c, 0x8c, 0x62, 0x85, 0x5e, 0x49, 0xb5, 0xe1, 0x6a, 0x21, 0x32, 0xd2, 0x71, 0x8f,
	0xc3, 0x16, 0x7a, 0x9b, 0xe1, 0x18, 0x22, 0xb6, 0x5c, 0x96, 0x9b, 0x32, 0x67, 0x46, 0x2a, 0x12,
	0x38, 0x4e, 0x1b, 0xc2, 0x13, 0xe8, 0x69, 0xc3, 0x94, 0x21, 0xdd, 0x18, 0xa5, 0x01, 0xf5, 0x89,
	0x6d, 0xc8, 0x8b, 0x8c, 0xf4, 0x1c, 0x66, 0x43, 0x8c, 0xa1, 0x6b, 0x98, 0xc8, 0x49, 0x3f, 0x46,
	0xe9, 0x09, 0x75, 0x31, 0xbe, 0x80, 0x48, 0x14, 0xdb, 0xd2, 0x2c, 0x72, 0xb1, 0x11, 0x86, 0x1c,
	0xc7, 0x28, 0x1d, 0x52, 0x70, 0xd0, 0x27, 0x8b, 0xe0, 0x57, 0x30, 0x90, 0xa5, 0x69, 0x18, 0x27,
	0x8e, 0x11, 0x79, 0xcc, 0x53, 0x2e, 0x61, 0x94, 0x95, 0x8a, 0x19, 0x21, 0x8b, 0x8a, 0x14, 0xc6,
	0x28, 0x45, 0x74, 0x58, 0xa3, 0x8e, 0x96, 0xac, 0x21, 0xf4, 0x86, 0x6c, 0xf3, 0xbd, 0xd5, 0xa2,
	0xe4, 0x4f, 0x4d, 0x50, 0x1c, 0xa4, 0x21, 0x75, 0x31, 0x7e, 0x03, 0xe3, 0x9c, 0x69, 0xb3, 0x68,
	0x8f, 0xeb, 0x2d, 0x39, 0xb5, 0xf8, 0xc7, 0xd6, 0xc8, 0x17, 0x10, 0x39, 0xaa, 0x5c, 0xad, 0x34,
	0x37, 0xce, 0x94, 0x80, 0x82, 0x85, 0xee, 0x1c, 0x92, 0x0c, 0x21, 0xba, 0x2d, 0x56, 0xb2, 0x72,
	0x3f, 0xf9, 0x83, 0x20, 0xf4, 0xb9, 0x6d, 0x3e, 0x86, 0x60, 0xcd, 0xf7, 0xf5, 0x2e, 0xd6, 0x7c,
	0x8f, 0x47, 0xd0, 0x39, 0xf8, 0xdf, 0x11, 0x19, 0x7e, 0x07, 0x7d, 0xa9, 0xc4, 0xbd, 0x28, 0x48,
	0x10, 0x07, 0x69, 0x34, 0x7f, 0x39, 0xab, 0x96, 0x7c, 0x28, 0x32, 0xbb, 0x73, 0xef, 0x37, 0x85,
	0x51, 0x7b, 0x5a, 0x91, 0xf1, 0x19, 0x84, 0xa2, 0xb8, 0x57, 0x5c, 0x6b, 0xae, 0x49, 0xd7, 0x8d,
	0xd6, 0x00, 0x98, 0xc0, 0xf1, 0x8e, 0x2b, 0x2d, 0x64, 0xe1, 0xb6, 0x12, 0xd2, 0x3a, 0x9d, 0xbe,
	0x87, 0xa8, 0x55, 0xee, 0x11, 0x7d, 0x13, 0xe8, 0xed, 0x58, 0x5e, 0xf2, 0x4a, 0xa2, 0x4f, 0x3e,
	0x74, 0xae, 0x51, 0x72, 0x0d, 0x2f, 0x3e, 0xb3, 0x35, 0xff, 0xda, 0xdc, 0x4c, 0x7d, 0x71, 0xe7,
	0x00, 0xdf, 0xd9, 0x8e, 0xe9, 0xa5, 0x12, 0x5b, 0xe3, 0x8a, 0x0d, 0x68, 0x0b, 0x49, 0x5e, 0xc3,
	0xe4, 0xc1, 0x97, 0xd6, 0x1d, 0xef, 0x05, 0xaa, 0xbd, 0x98, 0xff, 0x46, 0xd0, 0xbf, 0x71, 0xd3,
	0xe3, 0x2b, 0xe8, 0x5a, 0x03, 0xf0, 0xf3, 0x7f, 0xed, 0x70, 0xfd, 0xa6, 0xcf, 0x1e, 0x78, 0x94,
	0x1c, 0xe1, 0x2f, 0x70, 0xfa, 0x5f, 0x13, 0x7c, 0x5e, 0xf3, 0x1e, 0xd7, 0x3d, 0x3d, 0x7b, 0xf2,
	0xdd, 0x97, 0x9c, 0x43, 0xd7, 0xde, 0x51, 0x23, 0xa2, 0xf5, 0x9b, 0x35, 0x22, 0x0e, 0xa7, 0x96,
	0x1c, 0x5d, 0xa1, 0x6f, 0x7d, 0xf7, 0x73, 0xbe, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x2f,
	0xa9, 0xaa, 0xac, 0x03, 0x00, 0x00,
}
