// Code generated by protoc-gen-go. DO NOT EDIT.
// source: emitio/emitio.proto

/*
Package emitio is a generated protocol buffer package.

It is generated from these files:
	emitio/emitio.proto

It has these top-level messages:
	ReadRowsRequest
	ReadRowsReply
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReadRowsRequest struct {
	Start []byte `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   []byte `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *ReadRowsRequest) Reset()                    { *m = ReadRowsRequest{} }
func (m *ReadRowsRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRowsRequest) ProtoMessage()               {}
func (*ReadRowsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReadRowsRequest) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *ReadRowsRequest) GetEnd() []byte {
	if m != nil {
		return m.End
	}
	return nil
}

type ReadRowsReply struct {
	Rows []*ReadRowsReply_Row `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
}

func (m *ReadRowsReply) Reset()                    { *m = ReadRowsReply{} }
func (m *ReadRowsReply) String() string            { return proto.CompactTextString(m) }
func (*ReadRowsReply) ProtoMessage()               {}
func (*ReadRowsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReadRowsReply) GetRows() []*ReadRowsReply_Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

type ReadRowsReply_Row struct {
	Row   []byte `protobuf:"bytes,1,opt,name=row,proto3" json:"row,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ReadRowsReply_Row) Reset()                    { *m = ReadRowsReply_Row{} }
func (m *ReadRowsReply_Row) String() string            { return proto.CompactTextString(m) }
func (*ReadRowsReply_Row) ProtoMessage()               {}
func (*ReadRowsReply_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *ReadRowsReply_Row) GetRow() []byte {
	if m != nil {
		return m.Row
	}
	return nil
}

func (m *ReadRowsReply_Row) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*ReadRowsRequest)(nil), "ReadRowsRequest")
	proto.RegisterType((*ReadRowsReply)(nil), "ReadRowsReply")
	proto.RegisterType((*ReadRowsReply_Row)(nil), "ReadRowsReply.Row")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Emitio service

type EmitioClient interface {
	ReadRows(ctx context.Context, in *ReadRowsRequest, opts ...grpc.CallOption) (*ReadRowsReply, error)
}

type emitioClient struct {
	cc *grpc.ClientConn
}

func NewEmitioClient(cc *grpc.ClientConn) EmitioClient {
	return &emitioClient{cc}
}

func (c *emitioClient) ReadRows(ctx context.Context, in *ReadRowsRequest, opts ...grpc.CallOption) (*ReadRowsReply, error) {
	out := new(ReadRowsReply)
	err := grpc.Invoke(ctx, "/Emitio/ReadRows", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Emitio service

type EmitioServer interface {
	ReadRows(context.Context, *ReadRowsRequest) (*ReadRowsReply, error)
}

func RegisterEmitioServer(s *grpc.Server, srv EmitioServer) {
	s.RegisterService(&_Emitio_serviceDesc, srv)
}

func _Emitio_ReadRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitioServer).ReadRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Emitio/ReadRows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitioServer).ReadRows(ctx, req.(*ReadRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Emitio_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Emitio",
	HandlerType: (*EmitioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadRows",
			Handler:    _Emitio_ReadRows_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emitio/emitio.proto",
}

func init() { proto.RegisterFile("emitio/emitio.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4e, 0xcd, 0xcd, 0x2c,
	0xc9, 0xcc, 0xd7, 0x87, 0x50, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x4a, 0x96, 0x5c, 0xfc, 0x41,
	0xa9, 0x89, 0x29, 0x41, 0xf9, 0xe5, 0xc5, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x22,
	0x5c, 0xac, 0xc5, 0x25, 0x89, 0x45, 0x25, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x10, 0x8e,
	0x90, 0x00, 0x17, 0x73, 0x6a, 0x5e, 0x8a, 0x04, 0x13, 0x58, 0x0c, 0xc4, 0x54, 0x4a, 0xe3, 0xe2,
	0x45, 0x68, 0x2d, 0xc8, 0xa9, 0x14, 0x52, 0xe3, 0x62, 0x29, 0xca, 0x2f, 0x2f, 0x96, 0x60, 0x54,
	0x60, 0xd6, 0xe0, 0x36, 0x12, 0xd2, 0x43, 0x91, 0xd5, 0x0b, 0xca, 0x2f, 0x0f, 0x02, 0xcb, 0x4b,
	0xe9, 0x72, 0x31, 0x07, 0xe5, 0x97, 0x83, 0x4c, 0x2c, 0xca, 0x2f, 0x87, 0xda, 0x02, 0x62, 0x82,
	0x6c, 0x2e, 0x4b, 0xcc, 0x29, 0x4d, 0x85, 0xda, 0x02, 0xe1, 0x18, 0x59, 0x70, 0xb1, 0xb9, 0x82,
	0x9d, 0x2c, 0xa4, 0xc7, 0xc5, 0x01, 0x33, 0x53, 0x48, 0x40, 0x0f, 0xcd, 0xdd, 0x52, 0x7c, 0xa8,
	0x16, 0x2a, 0x31, 0x24, 0xb1, 0x81, 0xfd, 0x68, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x59, 0xf5,
	0xe1, 0x43, 0xfa, 0x00, 0x00, 0x00,
}
